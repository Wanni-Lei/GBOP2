// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// create_grid
DataFrame create_grid(int n);
RcppExport SEXP _GBOP2_create_grid(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(create_grid(n));
    return rcpp_result_gen;
END_RCPP
}
// filter_and_calculate
DataFrame filter_and_calculate(DataFrame grid, int n);
RcppExport SEXP _GBOP2_filter_and_calculate(SEXP gridSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(filter_and_calculate(grid, n));
    return rcpp_result_gen;
END_RCPP
}
// calculate_and_add_probabilities
DataFrame calculate_and_add_probabilities(DataFrame nobs_grid, NumericVector p);
RcppExport SEXP _GBOP2_calculate_and_add_probabilities(SEXP nobs_gridSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type nobs_grid(nobs_gridSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_and_add_probabilities(nobs_grid, p));
    return rcpp_result_gen;
END_RCPP
}
// den_cpp
double den_cpp(int x, int y, int n, NumericVector p);
RcppExport SEXP _GBOP2_den_cpp(SEXP xSEXP, SEXP ySEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(den_cpp(x, y, n, p));
    return rcpp_result_gen;
END_RCPP
}
// create_tt
List create_tt(int s, int npt, NumericVector t_bound);
RcppExport SEXP _GBOP2_create_tt(SEXP sSEXP, SEXP nptSEXP, SEXP t_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type npt(nptSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t_bound(t_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(create_tt(s, npt, t_bound));
    return rcpp_result_gen;
END_RCPP
}
// create_rr
List create_rr(int s, int npt, NumericVector r_bound, NumericVector r_interm);
RcppExport SEXP _GBOP2_create_rr(SEXP sSEXP, SEXP nptSEXP, SEXP r_boundSEXP, SEXP r_intermSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type npt(nptSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_bound(r_boundSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_interm(r_intermSEXP);
    rcpp_result_gen = Rcpp::wrap(create_rr(s, npt, r_bound, r_interm));
    return rcpp_result_gen;
END_RCPP
}
// efftox_recursive_optim
List efftox_recursive_optim(NumericVector interm, IntegerVector npt, NumericVector p, NumericVector bound_eff, NumericVector bound_tox);
RcppExport SEXP _GBOP2_efftox_recursive_optim(SEXP intermSEXP, SEXP nptSEXP, SEXP pSEXP, SEXP bound_effSEXP, SEXP bound_toxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type interm(intermSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type npt(nptSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bound_eff(bound_effSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bound_tox(bound_toxSEXP);
    rcpp_result_gen = Rcpp::wrap(efftox_recursive_optim(interm, npt, p, bound_eff, bound_tox));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(unsigned int seed);
RcppExport SEXP _GBOP2_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// Exacterror
List Exacterror(NumericVector nobs, NumericVector ncut, double pnull, double palter);
RcppExport SEXP _GBOP2_Exacterror(SEXP nobsSEXP, SEXP ncutSEXP, SEXP pnullSEXP, SEXP palterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ncut(ncutSEXP);
    Rcpp::traits::input_parameter< double >::type pnull(pnullSEXP);
    Rcpp::traits::input_parameter< double >::type palter(palterSEXP);
    rcpp_result_gen = Rcpp::wrap(Exacterror(nobs, ncut, pnull, palter));
    return rcpp_result_gen;
END_RCPP
}
// exact_error_recursive2_Rcpp
List exact_error_recursive2_Rcpp(Rcpp::NumericVector nobs, Rcpp::NumericVector ncut, double pnull, double palter, int ntotal);
RcppExport SEXP _GBOP2_exact_error_recursive2_Rcpp(SEXP nobsSEXP, SEXP ncutSEXP, SEXP pnullSEXP, SEXP palterSEXP, SEXP ntotalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ncut(ncutSEXP);
    Rcpp::traits::input_parameter< double >::type pnull(pnullSEXP);
    Rcpp::traits::input_parameter< double >::type palter(palterSEXP);
    Rcpp::traits::input_parameter< int >::type ntotal(ntotalSEXP);
    rcpp_result_gen = Rcpp::wrap(exact_error_recursive2_Rcpp(nobs, ncut, pnull, palter, ntotal));
    return rcpp_result_gen;
END_RCPP
}
// my_dbinom
double my_dbinom(double x, double size, double prob);
RcppExport SEXP _GBOP2_my_dbinom(SEXP xSEXP, SEXP sizeSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(my_dbinom(x, size, prob));
    return rcpp_result_gen;
END_RCPP
}
// my_pbinom
double my_pbinom(double q, double size, double prob);
RcppExport SEXP _GBOP2_my_pbinom(SEXP qSEXP, SEXP sizeSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pbinom(q, size, prob));
    return rcpp_result_gen;
END_RCPP
}
// dbinom_product
double dbinom_product(const NumericVector& vXs, NumericVector& nobs, double prob);
RcppExport SEXP _GBOP2_dbinom_product(SEXP vXsSEXP, SEXP nobsSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type vXs(vXsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(dbinom_product(vXs, nobs, prob));
    return rcpp_result_gen;
END_RCPP
}
// GetocBiRcpp
List GetocBiRcpp(int seed, double nsim, NumericMatrix contrast, NumericVector nobs, double b, double b2, double pow2, NumericVector dprior, double ptrue, double phi, Function fff);
RcppExport SEXP _GBOP2_GetocBiRcpp(SEXP seedSEXP, SEXP nsimSEXP, SEXP contrastSEXP, SEXP nobsSEXP, SEXP bSEXP, SEXP b2SEXP, SEXP pow2SEXP, SEXP dpriorSEXP, SEXP ptrueSEXP, SEXP phiSEXP, SEXP fffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type contrast(contrastSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type pow2(pow2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dprior(dpriorSEXP);
    Rcpp::traits::input_parameter< double >::type ptrue(ptrueSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< Function >::type fff(fffSEXP);
    rcpp_result_gen = Rcpp::wrap(GetocBiRcpp(seed, nsim, contrast, nobs, b, b2, pow2, dprior, ptrue, phi, fff));
    return rcpp_result_gen;
END_RCPP
}
// GridSearchBiRcpp
NumericMatrix GridSearchBiRcpp(int seed, NumericMatrix contrast, NumericVector nobs, NumericVector dprior, NumericVector b1, NumericVector b2, NumericVector pow, double pn, double pa, double cutstart, double nsim, double err1, Function ffff);
RcppExport SEXP _GBOP2_GridSearchBiRcpp(SEXP seedSEXP, SEXP contrastSEXP, SEXP nobsSEXP, SEXP dpriorSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP powSEXP, SEXP pnSEXP, SEXP paSEXP, SEXP cutstartSEXP, SEXP nsimSEXP, SEXP err1SEXP, SEXP ffffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type contrast(contrastSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dprior(dpriorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pow(powSEXP);
    Rcpp::traits::input_parameter< double >::type pn(pnSEXP);
    Rcpp::traits::input_parameter< double >::type pa(paSEXP);
    Rcpp::traits::input_parameter< double >::type cutstart(cutstartSEXP);
    Rcpp::traits::input_parameter< double >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type err1(err1SEXP);
    Rcpp::traits::input_parameter< Function >::type ffff(ffffSEXP);
    rcpp_result_gen = Rcpp::wrap(GridSearchBiRcpp(seed, contrast, nobs, dprior, b1, b2, pow, pn, pa, cutstart, nsim, err1, ffff));
    return rcpp_result_gen;
END_RCPP
}
// set_seed_dual
void set_seed_dual(unsigned int seed);
RcppExport SEXP _GBOP2_set_seed_dual(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed_dual(seed);
    return R_NilValue;
END_RCPP
}
// exact_error_recursive_Rcpp
List exact_error_recursive_Rcpp(Rcpp::NumericVector nobs, Rcpp::NumericVector ncut1, Rcpp::NumericVector ncut2, double pnull, double palter, int ntotal);
RcppExport SEXP _GBOP2_exact_error_recursive_Rcpp(SEXP nobsSEXP, SEXP ncut1SEXP, SEXP ncut2SEXP, SEXP pnullSEXP, SEXP palterSEXP, SEXP ntotalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ncut1(ncut1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ncut2(ncut2SEXP);
    Rcpp::traits::input_parameter< double >::type pnull(pnullSEXP);
    Rcpp::traits::input_parameter< double >::type palter(palterSEXP);
    Rcpp::traits::input_parameter< int >::type ntotal(ntotalSEXP);
    rcpp_result_gen = Rcpp::wrap(exact_error_recursive_Rcpp(nobs, ncut1, ncut2, pnull, palter, ntotal));
    return rcpp_result_gen;
END_RCPP
}
// GetocBiRcpp_dual
List GetocBiRcpp_dual(int seed, double nsim, NumericMatrix contrast, NumericVector nobs, double b, double b_grad1, double b_grad2, double pow1, double pow2, double pow3, NumericVector dprior, double ptrue, double phi, double delta0, double delta1, Function fff);
RcppExport SEXP _GBOP2_GetocBiRcpp_dual(SEXP seedSEXP, SEXP nsimSEXP, SEXP contrastSEXP, SEXP nobsSEXP, SEXP bSEXP, SEXP b_grad1SEXP, SEXP b_grad2SEXP, SEXP pow1SEXP, SEXP pow2SEXP, SEXP pow3SEXP, SEXP dpriorSEXP, SEXP ptrueSEXP, SEXP phiSEXP, SEXP delta0SEXP, SEXP delta1SEXP, SEXP fffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type contrast(contrastSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type b_grad1(b_grad1SEXP);
    Rcpp::traits::input_parameter< double >::type b_grad2(b_grad2SEXP);
    Rcpp::traits::input_parameter< double >::type pow1(pow1SEXP);
    Rcpp::traits::input_parameter< double >::type pow2(pow2SEXP);
    Rcpp::traits::input_parameter< double >::type pow3(pow3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dprior(dpriorSEXP);
    Rcpp::traits::input_parameter< double >::type ptrue(ptrueSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type delta0(delta0SEXP);
    Rcpp::traits::input_parameter< double >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< Function >::type fff(fffSEXP);
    rcpp_result_gen = Rcpp::wrap(GetocBiRcpp_dual(seed, nsim, contrast, nobs, b, b_grad1, b_grad2, pow1, pow2, pow3, dprior, ptrue, phi, delta0, delta1, fff));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GBOP2_create_grid", (DL_FUNC) &_GBOP2_create_grid, 1},
    {"_GBOP2_filter_and_calculate", (DL_FUNC) &_GBOP2_filter_and_calculate, 2},
    {"_GBOP2_calculate_and_add_probabilities", (DL_FUNC) &_GBOP2_calculate_and_add_probabilities, 2},
    {"_GBOP2_den_cpp", (DL_FUNC) &_GBOP2_den_cpp, 4},
    {"_GBOP2_create_tt", (DL_FUNC) &_GBOP2_create_tt, 3},
    {"_GBOP2_create_rr", (DL_FUNC) &_GBOP2_create_rr, 4},
    {"_GBOP2_efftox_recursive_optim", (DL_FUNC) &_GBOP2_efftox_recursive_optim, 5},
    {"_GBOP2_set_seed", (DL_FUNC) &_GBOP2_set_seed, 1},
    {"_GBOP2_Exacterror", (DL_FUNC) &_GBOP2_Exacterror, 4},
    {"_GBOP2_exact_error_recursive2_Rcpp", (DL_FUNC) &_GBOP2_exact_error_recursive2_Rcpp, 5},
    {"_GBOP2_my_dbinom", (DL_FUNC) &_GBOP2_my_dbinom, 3},
    {"_GBOP2_my_pbinom", (DL_FUNC) &_GBOP2_my_pbinom, 3},
    {"_GBOP2_dbinom_product", (DL_FUNC) &_GBOP2_dbinom_product, 3},
    {"_GBOP2_GetocBiRcpp", (DL_FUNC) &_GBOP2_GetocBiRcpp, 11},
    {"_GBOP2_GridSearchBiRcpp", (DL_FUNC) &_GBOP2_GridSearchBiRcpp, 13},
    {"_GBOP2_set_seed_dual", (DL_FUNC) &_GBOP2_set_seed_dual, 1},
    {"_GBOP2_exact_error_recursive_Rcpp", (DL_FUNC) &_GBOP2_exact_error_recursive_Rcpp, 6},
    {"_GBOP2_GetocBiRcpp_dual", (DL_FUNC) &_GBOP2_GetocBiRcpp_dual, 16},
    {NULL, NULL, 0}
};

RcppExport void R_init_GBOP2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
